[gd_scene load_steps=2 format=3 uid="uid://34qkv164qdm4"]

[sub_resource type="GDScript" id="GDScript_gmq0s"]
script/source = "extends Node


func _ready():
	ladder(28)

func ladder(_input_number_circle):
	var number_circle = _input_number_circle
	var current_circle: int
	var steps_counter: int
	
	while current_circle < number_circle:
		steps_counter += 1
		current_circle += steps_counter
	if current_circle > number_circle: print(steps_counter - 1)
	else: print(steps_counter)


func fibonacci_numbers(_input_number: int):
	var number := _input_number
	var first_term : int = 1
	var second_term : int = 1
	var amount : int
	var line : String = str(first_term, ', ', second_term, ', ')
	
# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233
	while amount < number:
		amount = first_term + second_term
		if amount < number: line += str(amount, ', ')
		elif amount >= number: line += str(amount)
		
		first_term = second_term
		second_term = amount
	print(line)


func get_cell_in_square(x_position, y_position, start_color := true):
	var start_cell = start_color # white
	var cell_color : bool
	var x = x_position
	var y = y_position
	
	#if x % 2 != 0 and y % 2 != 0: cell_color = start_cell
	#if x % 2 == 0 and y % 2 == 0: cell_color = start_cell
	#if x % 2 != 0 and y % 2 == 0: cell_color = not start_cell
	#if x % 2 == 0 and y % 2 != 0: cell_color = not start_cell
	# либо:
	if (x % 2) == (y % 2): cell_color = start_cell
	else: cell_color = not start_cell
	# либо:
	#if (x % 2) + (y % 2) == 1: not start_cell
	#else: start_cell
	
	return cell_color


func get_cell_in_row(x_position, start_color := false):
	var start_cell := start_color #т.е. клетка белая
	var cell_color : bool
	
	if x_position % 2 == 0:
		cell_color = not start_cell
	else:
		cell_color = start_cell
	return cell_color


# true if black
func get_cell_color(x_pos, y_pos) -> bool:
	var coordinates := Vector2(x_pos,  y_pos)
	var black := '#'
	var white := '_'
	for y in range(8):
		var line : String
		for x in range(8):
			y_pos = y
			x_pos = x
			if y % 2 != 0: 
				if x % 2 == 0: line += '# ' 
				else: line += '_ '
			else:
				if x % 2 == 0: line += '_ '
				else: line += '# '
			#if y == 6 and x == 4: print('!!!', line + str(coordinates))
			#else: continue
		print(line)
	return false


func array_mirroring():
	var array : Array = [1, 2, 3]
	var _size = array.size()
	for idx in array.size():
		print(array[_size - 1 - idx])
		
		#print(array[_size - 2])
		#print(array[_size - 3])


func chesboard():
	var width := 5
	var height := 3
	for y in range(height):
		var line = ''
		for x in range(width):
			if y != 1:
				if x % 2 == 0:
					line += '#'
				else:
					line += '_'
			else:
				if x % 2 == 0:
					line += '_'
				else:
					line += '#'
		print(line)


func snake(input_width: int, input_height: int):
	var height := input_height
	var width := input_width
	var global_number := 0
	for y in range(1, height + 1):
		var x_counter : int = 0
		var line : String = ''
		var string_number := 0
		if y % 2 != 0:
			for x in range(width):
				string_number = global_number - 1
				string_number += 1
				global_number += 1
				line += str(string_number) + ' '
			print(line)
		
		if y % 2 == 0:
			x_counter += global_number + width
			while x_counter != global_number:
				x_counter -= 1
				line += str(x_counter) + ' '
			global_number += width
			print(line)
		#or:
			#for x in range(width): # второе решение
				#y_counter = global_number + width
				#while y_counter != global_number:
					#y_counter -= 1
					#line += str(y_counter) + ' '
				#string_number = global_number + 1
				#string_number -= 1
				#global_number += 1
				#line += ' ' + str(string_number).reverse()
			#print(line.reverse())
			


func individual_element_in_array():
	var array := range(1, 5 + 1)
	var array_b = []
	var start_idx := 1
	var end_idx := 3
	for idx in range(start_idx, end_idx + 1):
		# 2, 3, 4
		array_b.append(array[idx])
		print(array_b)


func remainder_one():
	var line : String
	for el in range(1, 10 + 1):
		if el % 3 == 0:
			line += '*'
		else: 
			line += str(el)
	print(line)


func remainder_two():
	var amount : int
	for el in range(1, 100 + 1):
		var el_amount = el % 5
		amount += el_amount
	print(amount)
"

[node name="Learning" type="Node"]
script = SubResource("GDScript_gmq0s")
